generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, postgis]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model alert_event {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id     String     @db.Uuid
  type         alert_type
  severity     Int?       @db.SmallInt
  detail       Json?
  occurred_at  DateTime   @default(now()) @db.Timestamptz(6)
  acknowledged Boolean    @default(false)
  created_by   String?    @db.Uuid
  truck        truck      @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model daily_route {
  id           String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id     String                   @db.Uuid
  route_date   DateTime                 @db.Date
  geom         Unsupported("geography")
  point_count  Int
  generated_at DateTime                 @default(now()) @db.Timestamptz(6)
  created_by   String?                  @db.Uuid
  truck        truck                    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([truck_id, route_date])
}

model device {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id                String                    @db.Uuid
  sn                      String                    @unique
  sim_number              String?
  installed_at            DateTime                  @default(now()) @db.Timestamptz(6)
  removed_at              DateTime?                 @db.Timestamptz(6)
  created_by              String?                   @db.Uuid
  updated_by              String?                   @db.Uuid
  truck                   truck                     @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  device_status_event     device_status_event[]
  device_truck_assignment device_truck_assignment[]
  gps_position            gps_position[]
  hub_temperature_event   hub_temperature_event[]
  lock_event              lock_event[]
  sensor                  sensor[]
  tire_pressure_event     tire_pressure_event[]

  @@index([sim_number], map: "idx_device_sim_number")
  @@index([sn], map: "idx_device_sn")
}

model device_status_event {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id     String   @db.Uuid
  truck_id      String   @db.Uuid
  host_bat      Int?     @db.SmallInt
  repeater1_bat Int?     @db.SmallInt
  repeater2_bat Int?     @db.SmallInt
  lock_state    Int?     @db.SmallInt
  reported_at   DateTime @default(now()) @db.Timestamptz(6)
  created_by    String?  @db.Uuid
  device        device   @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck         truck    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([truck_id, reported_at(sort: Desc)], map: "idx_device_status_event_truck_id")
}

model device_truck_assignment {
  id                                               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id                                        String?   @db.Uuid
  truck_id                                         String?   @db.Uuid
  assigned_at                                      DateTime  @default(now()) @db.Timestamptz(6)
  assigned_by                                      String?   @db.Uuid
  removed_at                                       DateTime? @db.Timestamptz(6)
  removed_by                                       String?   @db.Uuid
  is_active                                        Boolean?  @default(true)
  users_device_truck_assignment_assigned_byTousers users?    @relation("device_truck_assignment_assigned_byTousers", fields: [assigned_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  device                                           device?   @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_device_truck_assignment_removed_byTousers  users?    @relation("device_truck_assignment_removed_byTousers", fields: [removed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck                                            truck?    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([device_id, assigned_at(sort: Desc)], map: "idx_device_truck_assignment_device_id")
  @@index([truck_id, assigned_at(sort: Desc)], map: "idx_device_truck_assignment_truck_id")
}

model fleet_group {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  site        String?
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  created_by  String?   @db.Uuid
  updated_by  String?   @db.Uuid
  truck       truck[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model fuel_level_event {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id     String   @db.Uuid
  fuel_percent Float?   @db.Real
  changed_at   DateTime @db.Timestamptz(6)
  source       String?
  created_by   String?  @db.Uuid
  truck        truck    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([truck_id, changed_at(sort: Desc)], map: "idx_fuel_level_event_truck_ts")
}

model geofence {
  id         String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  area       Unsupported("geography")
  created_by String?                  @db.Uuid
  created_at DateTime?                @default(now()) @db.Timestamptz(6)
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model gps_position {
  id          BigInt                   @default(autoincrement())
  device_id   String?                  @db.Uuid
  truck_id    String                   @db.Uuid
  ts          DateTime                 @db.Timestamptz(6)
  pos         Unsupported("geography")
  speed_kph   Float?                   @db.Real
  heading_deg Float?                   @db.Real
  hdop        Float?                   @db.Real
  source      String?
  device      device?                  @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck       truck                    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([id, ts])
  @@index([pos], map: "idx_gps_position_pos", type: Gist)
  @@index([pos], map: "idx_gps_position_spatial", type: Gist)
  @@index([truck_id, ts(sort: Desc)], map: "idx_gps_position_truck_ts")
}

model hub_temperature_event {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id     String   @db.Uuid
  truck_id      String   @db.Uuid
  hub_no        Int?
  temp_celsius  Float?   @db.Real
  ex_type       String?
  battery_level Int?     @db.SmallInt
  changed_at    DateTime @default(now()) @db.Timestamptz(6)
  created_by    String?  @db.Uuid
  device        device   @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck         truck    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([truck_id, changed_at(sort: Desc)], map: "idx_hub_temperature_event_truck_id")
  @@index([truck_id, changed_at(sort: Desc)], map: "idx_hub_temperature_event_truck_ts")
}

model lock_event {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id   String   @db.Uuid
  truck_id    String   @db.Uuid
  is_lock     Int?     @db.SmallInt
  reported_at DateTime @default(now()) @db.Timestamptz(6)
  created_by  String?  @db.Uuid
  device      device   @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck       truck    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([truck_id, reported_at(sort: Desc)], map: "idx_lock_event_truck_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model sensor {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id    String    @db.Uuid
  type         String?
  position_no  Int
  sn           String?   @unique
  installed_at DateTime? @default(now()) @db.Timestamptz(6)
  removed_at   DateTime? @db.Timestamptz(6)
  created_by   String?   @db.Uuid
  updated_by   String?   @db.Uuid
  device       device    @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sensor_data_raw {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_sn               String
  cmd_type                String
  truck_id                String?                   @db.Uuid
  tire_no                 Int?
  raw_json                Json
  processed               Boolean?                  @default(false)
  received_at             DateTime                  @default(now()) @db.Timestamptz(6)
  processed_at            DateTime?                 @db.Timestamptz(6)
  truck                   truck?                    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sensor_processing_queue sensor_processing_queue[]

  @@index([cmd_type, received_at(sort: Desc)], map: "idx_sensor_data_raw_cmd_type")
  @@index([device_sn, received_at(sort: Desc)], map: "idx_sensor_data_raw_device_sn")
  @@index([processed, received_at(sort: Desc)], map: "idx_sensor_data_raw_processed")
}

model sensor_processing_queue {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  raw_data_id     String?          @db.Uuid
  priority        Int?             @default(1)
  attempts        Int?             @default(0)
  max_attempts    Int?             @default(3)
  error_message   String?
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  processed_at    DateTime?        @db.Timestamptz(6)
  sensor_data_raw sensor_data_raw? @relation(fields: [raw_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([priority, created_at], map: "idx_sensor_processing_queue_priority")
  @@index([processed_at], map: "idx_sensor_processing_queue_processed")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model speed_event {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id   String   @db.Uuid
  speed_kph  Float?   @db.Real
  changed_at DateTime @db.Timestamptz(6)
  source     String?
  created_by String?  @db.Uuid
  truck      truck    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([truck_id, changed_at(sort: Desc)], map: "idx_speed_event_truck_ts")
}

model tire_error_code {
  code        Int     @id
  description String?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tire_position_config {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id      String?   @db.Uuid
  tire_no       Int
  position_name String?
  wheel_type    String?
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  truck         truck?    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([truck_id, tire_no])
}

model tire_pressure_event {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  device_id     String   @db.Uuid
  truck_id      String   @db.Uuid
  tire_no       Int
  pressure_kpa  Float?   @db.Real
  temp_celsius  Float?   @db.Real
  ex_type       String?
  battery_level Int?     @db.SmallInt
  changed_at    DateTime @default(now()) @db.Timestamptz(6)
  created_by    String?  @db.Uuid
  device        device   @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck         truck    @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([tire_no, changed_at(sort: Desc)], map: "idx_tire_pressure_event_tire_no")
  @@index([truck_id, changed_at(sort: Desc)], map: "idx_tire_pressure_event_truck_id")
  @@index([truck_id, changed_at(sort: Desc)], map: "idx_tire_pressure_event_truck_ts")
}

model trip {
  id        String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id  String                    @db.Uuid
  start_ts  DateTime                  @db.Timestamptz(6)
  end_ts    DateTime?                 @db.Timestamptz(6)
  start_pos Unsupported("geography")?
  end_pos   Unsupported("geography")?
  truck     truck                     @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model truck {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plate_number            String                    @unique
  vin                     String?                   @unique
  name                    String?
  model                   String?
  year                    Int?
  tire_config             String?
  fleet_group_id          String?                   @db.Uuid
  created_at              DateTime                  @default(now()) @db.Timestamptz(6)
  created_by              String?                   @db.Uuid
  updated_by              String?                   @db.Uuid
  alert_event             alert_event[]
  daily_route             daily_route[]
  device                  device[]
  device_status_event     device_status_event[]
  device_truck_assignment device_truck_assignment[]
  fuel_level_event        fuel_level_event[]
  gps_position            gps_position[]
  hub_temperature_event   hub_temperature_event[]
  lock_event              lock_event[]
  sensor_data_raw         sensor_data_raw[]
  speed_event             speed_event[]
  tire_position_config    tire_position_config[]
  tire_pressure_event     tire_pressure_event[]
  trip                    trip[]
  fleet_group             fleet_group?              @relation(fields: [fleet_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  truck_status_event      truck_status_event[]
}

model truck_status_event {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  truck_id   String       @db.Uuid
  status     truck_status
  note       String?
  changed_at DateTime     @default(now()) @db.Timestamptz(6)
  created_by String?      @db.Uuid
  truck      truck        @relation(fields: [truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                                                 String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                                                           String                    @unique
  email                                                              String?                   @unique
  password_hash                                                      String
  role                                                               String?                   @default("user")
  is_active                                                          Boolean?                  @default(true)
  created_at                                                         DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                                                         DateTime?                 @default(now()) @db.Timestamptz(6)
  device_truck_assignment_device_truck_assignment_assigned_byTousers device_truck_assignment[] @relation("device_truck_assignment_assigned_byTousers")
  device_truck_assignment_device_truck_assignment_removed_byTousers  device_truck_assignment[] @relation("device_truck_assignment_removed_byTousers")
}

enum alert_type {
  LOW_TIRE
  SPEEDING
  IDLE
  GEOFENCE_IN
  GEOFENCE_OUT
  FUEL_DROP
  HIGH_TEMP
  DEVICE_LOST
}

enum truck_status {
  active
  inactive
  maintenance
}
